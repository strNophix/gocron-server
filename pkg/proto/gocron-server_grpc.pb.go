// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gocron_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error)
	ListenJobs(ctx context.Context, in *ListenJobRequest, opts ...grpc.CallOption) (Scheduler_ListenJobsClient, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error) {
	out := new(RunJobResponse)
	err := c.cc.Invoke(ctx, "/gocron_server.Scheduler/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListenJobs(ctx context.Context, in *ListenJobRequest, opts ...grpc.CallOption) (Scheduler_ListenJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], "/gocron_server.Scheduler/ListenJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerListenJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_ListenJobsClient interface {
	Recv() (*ListenJobResponse, error)
	grpc.ClientStream
}

type schedulerListenJobsClient struct {
	grpc.ClientStream
}

func (x *schedulerListenJobsClient) Recv() (*ListenJobResponse, error) {
	m := new(ListenJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error)
	ListenJobs(*ListenJobRequest, Scheduler_ListenJobsServer) error
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedSchedulerServer) ListenJobs(*ListenJobRequest, Scheduler_ListenJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenJobs not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocron_server.Scheduler/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RunJob(ctx, req.(*RunJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListenJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).ListenJobs(m, &schedulerListenJobsServer{stream})
}

type Scheduler_ListenJobsServer interface {
	Send(*ListenJobResponse) error
	grpc.ServerStream
}

type schedulerListenJobsServer struct {
	grpc.ServerStream
}

func (x *schedulerListenJobsServer) Send(m *ListenJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocron_server.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJob",
			Handler:    _Scheduler_RunJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenJobs",
			Handler:       _Scheduler_ListenJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gocron-server.proto",
}
